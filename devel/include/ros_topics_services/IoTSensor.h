// Generated by gencpp from file ros_topics_services/IoTSensor.msg
// DO NOT EDIT!


#ifndef ROS_TOPICS_SERVICES_MESSAGE_IOTSENSOR_H
#define ROS_TOPICS_SERVICES_MESSAGE_IOTSENSOR_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ros_topics_services
{
template <class ContainerAllocator>
struct IoTSensor_
{
  typedef IoTSensor_<ContainerAllocator> Type;

  IoTSensor_()
    : id(0)
    , device_name()
    , temperature(0.0)
    , humidity(0.0)  {
    }
  IoTSensor_(const ContainerAllocator& _alloc)
    : id(0)
    , device_name(_alloc)
    , temperature(0.0)
    , humidity(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _id_type;
  _id_type id;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _device_name_type;
  _device_name_type device_name;

   typedef float _temperature_type;
  _temperature_type temperature;

   typedef float _humidity_type;
  _humidity_type humidity;





  typedef boost::shared_ptr< ::ros_topics_services::IoTSensor_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_topics_services::IoTSensor_<ContainerAllocator> const> ConstPtr;

}; // struct IoTSensor_

typedef ::ros_topics_services::IoTSensor_<std::allocator<void> > IoTSensor;

typedef boost::shared_ptr< ::ros_topics_services::IoTSensor > IoTSensorPtr;
typedef boost::shared_ptr< ::ros_topics_services::IoTSensor const> IoTSensorConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_topics_services::IoTSensor_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_topics_services::IoTSensor_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_topics_services::IoTSensor_<ContainerAllocator1> & lhs, const ::ros_topics_services::IoTSensor_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.device_name == rhs.device_name &&
    lhs.temperature == rhs.temperature &&
    lhs.humidity == rhs.humidity;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_topics_services::IoTSensor_<ContainerAllocator1> & lhs, const ::ros_topics_services::IoTSensor_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_topics_services

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_topics_services::IoTSensor_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_topics_services::IoTSensor_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_topics_services::IoTSensor_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_topics_services::IoTSensor_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_topics_services::IoTSensor_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_topics_services::IoTSensor_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_topics_services::IoTSensor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "52c500a928f374dd7e41833541966a53";
  }

  static const char* value(const ::ros_topics_services::IoTSensor_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x52c500a928f374ddULL;
  static const uint64_t static_value2 = 0x7e41833541966a53ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_topics_services::IoTSensor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_topics_services/IoTSensor";
  }

  static const char* value(const ::ros_topics_services::IoTSensor_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_topics_services::IoTSensor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 id\n"
"string device_name\n"
"float32 temperature\n"
"float32 humidity\n"
;
  }

  static const char* value(const ::ros_topics_services::IoTSensor_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_topics_services::IoTSensor_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.device_name);
      stream.next(m.temperature);
      stream.next(m.humidity);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct IoTSensor_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_topics_services::IoTSensor_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_topics_services::IoTSensor_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "device_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.device_name);
    s << indent << "temperature: ";
    Printer<float>::stream(s, indent + "  ", v.temperature);
    s << indent << "humidity: ";
    Printer<float>::stream(s, indent + "  ", v.humidity);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_TOPICS_SERVICES_MESSAGE_IOTSENSOR_H
